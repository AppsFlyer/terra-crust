.go_env_var: &go_env_var |
  export GOPATH=$HOME/dev
  export GO111MODULE=on
  export GONOSUMDB=gitlab.appsflyer.com
  export GOPROXY="http://goproxy.appsflyer.com,https://proxy.golang.org,direct"
  export PATH=/usr/local/go/bin:$GOPATH/bin:$PATH

variables:
  ARTIFACT_NAME_PREFIX: "terra-crust"
  LIST_OF_PATHS_TO_INCLUDE_IN_ARCHIVE: "main ./internal/cmd/config"
  GOLANGCI_LINT_VERSION: "v1.41.1"
  GOLANG_IMAGE_TAG: "1.16.4-alpine"

stages:
  - pre-build
  - build
  - post-build

version:
  stage: pre-build
  # TODO: manually mirror the image in Artifactory because gitlab supports push mirror only
  image: registry.gitlab.com/juhani/go-semrel-gitlab:v0.21.1
  script:
    - release next-version --allow-current > .next-version
    - cat .next-version
  artifacts:
    paths:
      - .next-version
    expire_in: 1 day
  except:
    - tags

lint:
  stage: pre-build
  image: "artifactory.appsflyer.com:5000/library/golang:${GOLANG_IMAGE_TAG}"
  before_script:
    - *go_env_var
    - apk add git curl build-base
    - curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin ${GOLANGCI_LINT_VERSION}
    # - go get -v "github.com/golangci/golangci-lint/cmd/golangci-lint@${GOLANGCI_LINT_VERSION}"
  script:
    - golangci-lint run --fast --enable-all -D scopelint -D gocyclo -D godot -D funlen -D lll -D gocognit -D gofumpt -D wsl -D gomnd --skip-dirs-use-default
  allow_failure: true
  except:
    - tags

build:
  stage: build
  image: "artifactory.appsflyer.com:5000/library/golang:${GOLANG_IMAGE_TAG}"
  dependencies:
    - version
  before_script:
    - *go_env_var
  script:
    - VERSION=$(cat .next-version); echo ${VERSION}
    - GOARCH=amd64 GOOS=linux CGO_ENABLED=0 go build -ldflags '-s -w' -a -installsuffix cgo -o main ./internal/cmd/main.go
    - ls -alh; echo "Archiving ${LIST_OF_PATHS_TO_INCLUDE_IN_ARCHIVE}"; tar -cvzf ${ARTIFACT_NAME_PREFIX}_${VERSION}.tar.gz ${LIST_OF_PATHS_TO_INCLUDE_IN_ARCHIVE}
  artifacts:
    paths:
      - "${ARTIFACT_NAME_PREFIX}_*.tar.gz"
    expire_in: 1 day
  except:
    - tags

upload-artifactory:
  stage: post-build
  image: artifactory.appsflyer.com:5000/configuration-management/cm-infra-base:latest
  dependencies:
    - version
    - build
  script:
    - ARTIFACTORY_CREDENTIALS=$(curl -sS -H "X-Vault-Token:${VAULT_TOKEN}" -L https://vault.appsflyer.com/v1/secret/af_deployment | jq --raw-output .data.user,.data.old_password |  tr "\n" " " | awk {'print $1":"$2'})
    - VERSION=$(cat .next-version); echo ${VERSION}
    - curl --fail --user "${ARTIFACTORY_CREDENTIALS}" --request PUT "https://artifactory.appsflyer.com/artifactory/local-generic-realplatform/${ARTIFACT_NAME_PREFIX}/${ARTIFACT_NAME_PREFIX}_${VERSION}.tar.gz" --upload-file "${ARTIFACT_NAME_PREFIX}_${VERSION}.tar.gz"
    - curl --fail --user "${ARTIFACTORY_CREDENTIALS}" --request PUT "https://artifactory.appsflyer.com/artifactory/api/storage/local-generic-realplatform/${ARTIFACT_NAME_PREFIX}/${ARTIFACT_NAME_PREFIX}_${VERSION}.tar.gz?properties=COMMIT_SHORT_SHA=${CI_COMMIT_SHORT_SHA};PIPELINE_URL=${CI_PIPELINE_URL};BUILD_ID=${CI_BUILD_ID};SOURCE=${CI_PROJECT_URL};BRANCH=${CI_COMMIT_REF_NAME};COMMITTER=${GITLAB_USER_NAME};VERSION=${VERSION}"
  except:
    - tags
  only:
    - master

release:
  stage: post-build
  image: registry.gitlab.com/juhani/go-semrel-gitlab:v0.21.1
  before_script:
    - echo -e "machine gitlab.appsflyer.com\nlogin ci_bot\npassword ${GL_TOKEN}" > ~/.netrc
  script:
    - release next-version
    - release changelog
    - release commit-and-tag --create-tag-pipeline CHANGELOG.md
  dependencies:
    - build
  only:
    - master
  except:
    - tags
