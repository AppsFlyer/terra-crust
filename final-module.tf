# ▼▼▼ Automatically generated by Terraform SubmoduleTool, PLEASE DON'T EDIT MANUALLY :) ▼▼▼
 
variable mirror_maker {
	description = <<EOT
	(Optional) mirror_maker Module will be used by default.
	[Readme](https://gitlab.appsflyer.com/real-time-platform/af-rti-iac/modules/strimzi/-/blob/master/terraform/modules/mirror_maker/README.md)
	EOT
	type = object({ 
			checkpointconnector_config=optional(map(string)) 
			heartbeatconnector_config=optional(map(string)) 
			max_tasks=optional(number) 
			mirrormaker_version=optional(string) 
			replicas=optional(number) 
			source_cluster_alias=optional(string) 
			sourceconnector_config=optional(map(string)) 
			target_cluster_alias=optional(string) 
			wait=optional(bool) 
			wait_for_rollout=optional(bool) 
	})
	default = { 
			checkpointconnector_config= {
      "checkpoints.topic.replication.factor": 1
      "replication.policy.separator": ""
      "replication.policy.class": "org.apache.kafka.connect.mirror.IdentityReplicationPolicy"
    } 
			heartbeatconnector_config= {
      "heartbeats.topic.replication.factor": 1
    } 
			max_tasks= 1 
			mirrormaker_version= "3.1.0" 
			replicas= 3 
			source_cluster_alias= "source-cluster-alias" 
			sourceconnector_config= {
        "replication.factor": 2
        "offset-syncs.topic.replication.factor": 1
        "sync.topic.acls.enabled": "false"
        "replication.policy.separator": ""
        "replication.policy.class": "org.apache.kafka.connect.mirror.IdentityReplicationPolicy"
    } 
			target_cluster_alias= "target-cluster-alias" 
			wait= true 
			wait_for_rollout= true 
	}
  }  
variable prometheous_stack {
	description = <<EOT
	(Optional) prometheous_stack Module will be used by default.
	[Readme](https://gitlab.appsflyer.com/real-time-platform/af-rti-iac/modules/strimzi/-/blob/master/terraform/modules/prometheous_stack/README.md)
	EOT
	type = object({ 
			atomic=optional(bool) 
			chart=optional(string) 
			chart_version=optional(string) 
			cleanup_on_fail=optional(bool) 
			create_namespace=optional(bool) 
			create_resource=optional(bool) 
			grafana_annotations=optional(map(string)) 
			is_NodeExporter=optional(bool) 
			name=optional(string) 
			namespace=optional(string) 
			operator_annotations=optional(map(string)) 
			repository=optional(string) 
			timeout=optional(number) 
			wait=optional(bool) 
			wait_for_rollout=optional(bool) 
	})
	default = { 
			atomic= true 
			chart= "kube-prometheus-stack" 
			chart_version= "33.0.0" 
			cleanup_on_fail= true 
			create_namespace= true 
			create_resource= true 
			grafana_annotations= {
    "consul.hashicorp.com/service-sync" : "true"
  } 
			is_NodeExporter= true 
			name= "kube-prometheus-stack" 
			namespace= "monitoring" 
			operator_annotations= {
    "consul.hashicorp.com/service-sync" : "true"
  } 
			repository= "https://prometheus-community.github.io/helm-charts" 
			timeout= 300 
			wait= true 
			wait_for_rollout= true 
	}
  }  
variable storage_local_provisioner {
	description = <<EOT
	(Optional) storage_local_provisioner Module will be used by default.
	[Readme](https://gitlab.appsflyer.com/real-time-platform/af-rti-iac/modules/strimzi/-/blob/master/terraform/modules/storage_local_provisioner/README.md)
	EOT
	type = object({ 
			atomic=optional(bool) 
			chart=optional(string) 
			cleanup_on_fail=optional(bool) 
			create_local_storage_provisioner=optional(bool) 
			create_namespace=optional(bool) 
			local_provisioner_hostdir=optional(string) 
			name=optional(string) 
			namespace=optional(string) 
			storage_class=optional(string) 
			timeout=optional(number) 
			wait=optional(bool) 
	})
	default = { 
			atomic= true 
			chart= "vendors/provisioner" 
			cleanup_on_fail= true 
			create_local_storage_provisioner= true 
			create_namespace= true 
			local_provisioner_hostdir= "/mnt" 
			name= "local-storage-provisioner" 
			namespace= "storage-provisioner" 
			storage_class= "nvme-ssd" 
			timeout= 300 
			wait= true 
	}
  } 